/**
 * @license
 * Copyright 2013 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ts = require("typescript");
var Lint = require("../index");
var utils_1 = require("../language/utils");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var preferConstWalker = new PreferConstWalker(sourceFile, this.getOptions());
        return this.applyWithWalker(preferConstWalker);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
/* tslint:disable:object-literal-sort-keys */
Rule.metadata = {
    ruleName: "prefer-const",
    description: "Requires that variable declarations use `const` instead of `let` if possible.",
    descriptionDetails: (_a = ["\n            If a variable is only assigned to once when it is declared, it should be declared using 'const'"], _a.raw = ["\n            If a variable is only assigned to once when it is declared, it should be declared using 'const'"], Lint.Utils.dedent(_a)),
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: ["true"],
    type: "maintainability",
    typescriptOnly: false,
};
/* tslint:enable:object-literal-sort-keys */
Rule.FAILURE_STRING_FACTORY = function (identifier) {
    return "Identifier '" + identifier + "' is never reassigned; use 'const' instead of 'let'.";
};
exports.Rule = Rule;
var PreferConstWalker = (function (_super) {
    __extends(PreferConstWalker, _super);
    function PreferConstWalker() {
        return _super.apply(this, arguments) || this;
    }
    PreferConstWalker.prototype.createScope = function () {
        return {};
    };
    PreferConstWalker.prototype.createBlockScope = function () {
        return new ScopeInfo();
    };
    PreferConstWalker.prototype.onBlockScopeEnd = function () {
        var seenLetStatements = {};
        for (var _i = 0, _a = this.getCurrentBlockScope().getConstCandiates(); _i < _a.length; _i++) {
            var usage = _a[_i];
            var fix = void 0;
            if (!usage.reassignedSibling && !seenLetStatements[usage.letStatement.getStart().toString()]) {
                // only fix if all variables in the `let` statement can use `const`
                var replacement = new Lint.Replacement(usage.letStatement.getStart(), "let".length, "const");
                fix = new Lint.Fix(Rule.metadata.ruleName, [replacement]);
                seenLetStatements[usage.letStatement.getStart().toString()] = true;
            }
            this.addFailureAtNode(usage.identifier, Rule.FAILURE_STRING_FACTORY(usage.identifier.text), fix);
        }
    };
    PreferConstWalker.prototype.visitBinaryExpression = function (node) {
        if (utils_1.isAssignment(node)) {
            this.handleLHSExpression(node.left);
        }
        _super.prototype.visitBinaryExpression.call(this, node);
    };
    PreferConstWalker.prototype.visitPrefixUnaryExpression = function (node) {
        this.handleUnaryExpression(node);
        _super.prototype.visitPrefixUnaryExpression.call(this, node);
    };
    PreferConstWalker.prototype.visitPostfixUnaryExpression = function (node) {
        this.handleUnaryExpression(node);
        _super.prototype.visitPostfixUnaryExpression.call(this, node);
    };
    PreferConstWalker.prototype.visitVariableDeclaration = function (node) {
        this.getCurrentBlockScope().currentVariableDeclaration = node;
        _super.prototype.visitVariableDeclaration.call(this, node);
        this.getCurrentBlockScope().currentVariableDeclaration = null;
    };
    PreferConstWalker.prototype.visitIdentifier = function (node) {
        if (this.getCurrentBlockScope().currentVariableDeclaration != null) {
            var declarationList = this.getCurrentBlockScope().currentVariableDeclaration.parent;
            if (utils_1.isNodeFlagSet(declarationList, ts.NodeFlags.Let)
                && !Lint.hasModifier(declarationList.parent.modifiers, ts.SyntaxKind.ExportKeyword)) {
                if (this.isVariableDeclaration(node)) {
                    this.getCurrentBlockScope().addVariable(node, declarationList);
                }
            }
        }
        _super.prototype.visitIdentifier.call(this, node);
    };
    PreferConstWalker.prototype.handleLHSExpression = function (node) {
        node = utils_1.unwrapParentheses(node);
        if (node.kind === ts.SyntaxKind.Identifier) {
            this.markAssignment(node);
        }
    };
    PreferConstWalker.prototype.handleUnaryExpression = function (node) {
        if (node.operator === ts.SyntaxKind.PlusPlusToken || node.operator === ts.SyntaxKind.MinusMinusToken) {
            this.handleLHSExpression(node.operand);
        }
    };
    PreferConstWalker.prototype.isVariableDeclaration = function (node) {
        if (this.getCurrentBlockScope().currentVariableDeclaration != null) {
            // `isBindingElementDeclaration` differentiates between non-variable binding elements and variable binding elements
            // for example in `let {a: {b}} = {a: {b: 1}}`, `a` is a non-variable and the 1st `b` is a variable
            var isBindingElementDeclaration = node.parent.kind === ts.SyntaxKind.BindingElement
                && node.parent.getText() === node.getText();
            var isSimpleVariableDeclaration = node.parent.kind === ts.SyntaxKind.VariableDeclaration;
            // differentiates between the left and right hand side of a declaration
            var inVariableDeclaration = this.getCurrentBlockScope().currentVariableDeclaration.name.getEnd() >= node.getEnd();
            return inVariableDeclaration && (isBindingElementDeclaration || isSimpleVariableDeclaration);
        }
        return false;
    };
    PreferConstWalker.prototype.markAssignment = function (identifier) {
        var allBlockScopes = this.getAllBlockScopes();
        // look through block scopes from local -> global
        for (var i = allBlockScopes.length - 1; i >= 0; i--) {
            if (allBlockScopes[i].incrementVariableUsage(identifier.text)) {
                break;
            }
        }
    };
    return PreferConstWalker;
}(Lint.BlockScopeAwareRuleWalker));
var ScopeInfo = (function () {
    function ScopeInfo() {
        this.identifierUsages = {};
        // variable names grouped by common `let` statements
        this.sharedLetSets = {};
    }
    ScopeInfo.prototype.addVariable = function (identifier, letStatement) {
        this.identifierUsages[identifier.text] = { letStatement: letStatement, identifier: identifier, usageCount: 0 };
        var letSetKey = letStatement.getStart().toString();
        if (this.sharedLetSets[letSetKey] == null) {
            this.sharedLetSets[letSetKey] = [];
        }
        this.sharedLetSets[letSetKey].push(identifier.text);
    };
    ScopeInfo.prototype.getConstCandiates = function () {
        var _this = this;
        var constCandidates = [];
        for (var _i = 0, _a = Object.keys(this.sharedLetSets); _i < _a.length; _i++) {
            var letSetKey = _a[_i];
            var variableNames = this.sharedLetSets[letSetKey];
            var anyReassigned = variableNames.some(function (key) { return _this.identifierUsages[key].usageCount > 0; });
            for (var _b = 0, variableNames_1 = variableNames; _b < variableNames_1.length; _b++) {
                var variableName = variableNames_1[_b];
                var usage = this.identifierUsages[variableName];
                if (usage.usageCount === 0) {
                    constCandidates.push({
                        identifier: usage.identifier,
                        letStatement: usage.letStatement,
                        reassignedSibling: anyReassigned,
                    });
                }
            }
        }
        return constCandidates;
    };
    ScopeInfo.prototype.incrementVariableUsage = function (varName) {
        if (this.identifierUsages[varName] != null) {
            this.identifierUsages[varName].usageCount++;
            return true;
        }
        return false;
    };
    return ScopeInfo;
}());
var _a;
